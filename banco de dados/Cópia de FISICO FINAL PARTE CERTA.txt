-- Dropa as tabelas se já existirem

DROP TABLE IF EXISTS tb_agendas;

DROP TABLE IF EXISTS tb_imagens;

DROP TABLE IF EXISTS tb_clientes;

DROP TABLE IF EXISTS tb_espacos;

DROP TABLE IF EXISTS tb_cidades;



-- Criação das tabelas

CREATE TABLE IF NOT EXISTS tb_cidades (
  cod_cidade INTEGER PRIMARY KEY AUTO_INCREMENT COMMENT "Número de identificação da cidade (chave primária)",
  
  nome_cidade VARCHAR(50) NOT NULL COMMENT "Nome da cidade, com no máximo 50 caracteres",
  
  estado_cidade CHAR(2) NOT NULL COMMENT "Sigla do estado, com no maximo 2 caracteres", 
  
  CHECK (estado_cidade IN ('AC','AL','AP','AM','BA','CE','DF','ES','GO','MA','MT','MS','MG','PA','PB','PR','PE','PI','RR','RO','RJ','RN','RS','SC','SP','SE','TO'))
);




CREATE TABLE IF NOT EXISTS tb_clientes (

  cod_cliente INTEGER PRIMARY KEY AUTO_INCREMENT  COMMENT "Número de identificação do cliente (chave primária)",

  tipo_cliente CHAR(1) NOT NULL DEFAULT 'C' COMMENT "Indica se o cliente é uma pessoa comum ('C') ou um administrador ('A')",

  ativo CHAR(1) NOT NULL DEFAULT 'S' COMMENT "Indica se o cliente está ativo ('S') ou inativo ('N')",

  nome_cliente VARCHAR(250) NOT NULL COMMENT "Nome do cliente, com até 250 caracteres",

  data_nasc DATE NOT NULL COMMENT "Data de nascimento, do cliente",
 
  CHECK(data_nasc > '1903-01-01' AND data_nasc < '2007-01-01'),

  fone_cliente BIGINT(11) ZEROFILL NOT NULL COMMENT "Número de telefone do cliente", 

  senha VARCHAR(32) NOT NULL COMMENT "Senha do cliente (criptografada, com 32 caracteres)",

  cpf_cnpj BIGINT(11) ZEROFILL NOT NULL COMMENT "Número de CPF ou CNPJ do cliente",

  email_cliente VARCHAR(100) NOT NULL COMMENT "Endereço de e-mail do cliente",

  idtb_cidade INTEGER NOT NULL DEFAULT 1 COMMENT "Chave estrangeira referenciando a tabela 'tb_cidades'",

  CONSTRAINT fk_cliente_cidade FOREIGN KEY(idtb_cidade) REFERENCES tb_cidades(cod_cidade)

    ON DELETE CASCADE

    ON UPDATE CASCADE,

  CONSTRAINT ck_ativo CHECK (ativo = 'S' OR ativo = 'N'),

  CONSTRAINT ck_tipo_cliente CHECK (tipo_cliente ='C' OR tipo_cliente = 'A')

);



CREATE TABLE IF NOT EXISTS tb_espacos (

  cod_espaco INTEGER PRIMARY KEY AUTO_INCREMENT COMMENT "Número de identificação do espaço (chave primária)",

  nome_espaco VARCHAR(50) NOT NULL COMMENT "Nome do espaço, com no máximo 50 caracteres",
  
  valor float(5,2) NOT NULL COMMENT "Valor de aluguel do espaço",

  ativo CHAR(1) NOT NULL DEFAULT 'S'  COMMENT "Indica se o espaço está ativo ('S') ou inativo ('N')",

  descricao VARCHAR(100) NOT NULL COMMENT "Descrição do espaço, com até 100 caracteres",

  CONSTRAINT ck_espaco_ativo CHECK (ativo = 'S' OR ativo = 'N')

);



CREATE TABLE IF NOT EXISTS tb_horarios (

  cod_horario INTEGER PRIMARY KEY AUTO_INCREMENT,

  entrada_tarde TIME,

  entrada_noite TIME,

  saida_tarde TIME,

  saida_noite TIME,

  dia_semana VARCHAR(250),

  idtb_espaco INTEGER,

  CONSTRAINT fk_horario_espaco FOREIGN KEY(idtb_espaco) REFERENCES tb_espacos(cod_espaco)

    ON DELETE CASCADE

    ON UPDATE CASCADE

);



CREATE TABLE IF NOT EXISTS tb_imagens (

  cod_imagem INTEGER PRIMARY KEY AUTO_INCREMENT COMMENT "Número de identificação da imagem (chave primária)",

  idtb_espaco INT NOT NULL COMMENT "Chave estrangeira referenciando a tabela 'tb_espacos'",

  imagem VARCHAR(255) NOT NULL COMMENT "Caminho ou nome do arquivo da imagem, com até 255 caracteres",

  CONSTRAINT fk_imagem_espaco FOREIGN KEY(idtb_espaco) REFERENCES tb_espacos(cod_espaco)

    ON DELETE CASCADE

    ON UPDATE CASCADE

);



CREATE TABLE IF NOT EXISTS tb_agendas (

  cod_agenda INTEGER PRIMARY KEY AUTO_INCREMENT COMMENT "Número de identificação da agenda (chave primária)",

  data DATE NOT NULL COMMENT "Data da agenda",
	
  hora TIME NOT NULL COMMENT "Hora da agenda",

  tipo_pagamento VARCHAR(8) DEFAULT 'Dinheiro' COMMENT "Tipo de pagamento ('D' para dinheiro ou 'P' para pix)",

  idtb_cliente INTEGER NOT NULL COMMENT "Chave estrangeira referenciando a tabela 'tb_clientes'" ,

  idtb_espaco INTEGER NOT NULL COMMENT "Chave estrangeira referenciando a tabela 'tb_espacos'",


  CONSTRAINT fk_agenda_cliente FOREIGN KEY(idtb_cliente) REFERENCES tb_clientes(cod_cliente)

    ON DELETE CASCADE

    ON UPDATE CASCADE,

  CONSTRAINT fk_agenda_espaco FOREIGN KEY(idtb_espaco) REFERENCES tb_espacos(cod_espaco)

    ON DELETE CASCADE

    ON UPDATE CASCADE,

  CONSTRAINT ck_tipo_pagamento CHECK (tipo_pagamento ='Dinheiro' OR tipo_pagamento = 'Pix')

);
DROP TABLE tb_horarios;

ALTER TABLE tb_agendas
ADD COLUMN data_sistema DATE NOT NULL COMMENT 'Data e hora do sistema quando a agenda foi registrada';

ALTER TABLE tb_agendas
ADD COLUMN status_agenda VARCHAR(15) NOT NULL COMMENT 'Status atual da agenda';




